services:
  jenkins:
    container_name: jenkins_container
    image: jenkins/jenkins:lts
    restart: on-failure
    ports:
      - "8085:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home  # Volume persistant pour Jenkins
    networks:
      - devops
  
  postgres:
    container_name: postgres_container
    image: postgres:12
    environment:
      POSTGRES_USER: "sonar"
      POSTGRES_PASSWORD: "sonar"
      POSTGRES_DB: "sonar"  # Ajouter cette variable pour définir la base de données par défaut
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Volume persistant pour PostgreSQL
    networks:
      - devops

  sonarqube:
    container_name: sonarqube_container
    image: sonarqube:community
    restart: on-failure
    ports:
      - "9000:9000"
    environment:
      SONAR_JDBC_URL: "jdbc:postgresql://postgres_container:5432/sonar"
      SONAR_JDBC_USERNAME: "sonar"
      SONAR_JDBC_PASSWORD: "sonar"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - sonarqube_data:/opt/sonarqube/data  # Volume persistant pour SonarQube
      - sonarqube_extensions:/opt/sonarqube/extensions  # Volume pour les extensions
      - sonarqube_logs:/opt/sonarqube/logs  # Volume pour les logs
    networks:
      - devops

networks:
  devops:
    driver: bridge
    name: devops

volumes:
  jenkins_home:  # Volume pour Jenkins
  postgres_data:  # Volume pour PostgreSQL
  sonarqube_data:  # Volume pour SonarQube
  sonarqube_extensions:  # Volume pour les extensions SonarQube
  sonarqube_logs:  # Volume pour les logs de SonarQube
